 IOT
What is IoT?
The internet of things, or IoT, is a system of interrelated computing devices,
mechanical and digital machines, objects, animals or people that are provided with
unique identifiers (UIDs) and the ability to transfer data over a network with the help
of super-cheap computer chips and the ubiquity of wireless networks. Connecting up
all these different objects and adding sensors to them adds a level of digital
intelligence to devices that would enable them to communicate real-time data without
requiring human-to-human or human-to-computer interaction. IoT is making the
fabric of the world around us smarter and more responsive, merging the digital and
physical universes.
How IoT works?
An IoT ecosystem consists of web-enabled smart devices that use embedded systems,
such as processors, sensors and communication hardware, to collect, send and act on
data they acquire from their environments. IoT devices share the sensor data they
collect by connecting to an IoT gateway or other edge device where data is either sent
to the cloud to be analysed or analysed locally. Sometimes, these devices
communicate with other related devices and act on the information they get from one
another. The devices do most of the work without human intervention, although
people can interact with the devices -- for instance, to set them up, give them
instructions or access the data. The connectivity, networking and communication
protocols used with these web-enabled devices largely depend on the specific IoT
applications deployed. IoT can also make use of artificial intelligence (AI) and machine
learning to aid in making data collecting processes easier and more dynamic.
Applications: -
The IoT promises to make our environment -- our homes and offices and vehicles --
smarter, more measurable, and... chattier. A lightbulb that can be switched on using a
smartphone app is an IoT device, as is a motion sensor or a smart thermostat in your
office or a connected streetlight. Some larger objects may themselves be filled with
many smaller IoT components, such as a jet engine that's now filled with thousands of 
sensors collecting and transmitting data back to make sure it is operating efficiently.
At an even bigger scale, smart cities projects are filling entire regions with sensors to
help us understand and control the environment. Manufacturers are adding sensors
to the components of their products so that they can transmit data back about how
they are performing. Smart speakers like Amazon's Echo and Google Home make it
easier to play music, set timers, or get information. Home security systems make it
easier to monitor what's going on inside and outside, or to see and talk to visitors.
Meanwhile, smart thermostats can help us heat our homes before we arrive back, and
smart lightbulbs can make it look like we're home even when we're out.
 NodeMCU
NodeMCU is an open source LUA based firmware developed for ESP8266 wi fi chip. By
exploring functionality with ESP8266 chip, NodeMCU
firmware comes with ESP8266 Development board/kit
i.e. NodeMCU Development board. Since NodeMCU is
open source platform, their hardware design is open for
edit/modify/build.NodeMCU Dev Kit/board consist of
ESP8266 wifi enabled chip. The ESP8266 is a lowcost Wi-Fi chip developed by Espressif Systems with
TCP/IP protocol.
NodeMCU Dev Kit has Arduino like Analog (i.e. A0) and Digital (D0-D8) pins on its
board. It supports serial communication protocols i.e. UART, SPI, I2C etc. Using such
serial protocols, we can connect it with serial devices like I2C enabled LCD display,
Magnetometer HMC5883, MPU-6050 Gyro meter + Accelerometer, RTC chips, GPS
modules, touch screen displays, SD cards etc. There is online NodeMCU custom builds
available using which we can easily get our custom NodeMCU firmware as per our
requirement.
NodeMCU can be developed using ESPlorer IDE. Lua scripts are generally used to code
the NodeMCU. Lua is an open source, lightweight, embeddable scripting language built
on top of C programming language. Here is another way of developing NodeMCU with
a well-known IDE i.e. Arduino IDE. We can also develop applications on NodeMCU
using Arduino development environment. We need to code in C\C++ programming
language if we are using Arduino IDE for developing NodeMCU applications and Lua
language if we are using ESPlorer IDE. Basically, NodeMCU is Lua Interpreter, so it can 
understand Lua script easily. When we write Lua scripts for NodeMCU and
send/upload it to NodeMCU, then they will get executes sequentially. It will not build
binary firmware file of code for NodeMCU to write. It will send Lua script as it is to
NodeMCU to get execute. In Arduino IDE when we write and compile code, ESP8266
toolchain in background creates binary firmware file of code we wrote. And when we
upload it to NodeMCU then it will flash all NodeMCU firmware with newly generated
binary firmware code. In fact, it writes the complete firmware. That’s the reason why
NodeMCU not accept further Lua scripts/code after it is getting flashed by Arduino
IDE. After getting flashed by Arduino sketch/code it will be no more Lua interpreter
and we got error if we try to upload Lua scripts. To again start with Lua script, we need
to flash it with NodeMCU firmware. Since Arduino IDE compile and upload/writes
complete firmware, it takes more time than ESPlorer IDE.
Features:
• Programmable WiFi module.
• Arduino-like hardware Input-Output.
• Can be programmed with the simple and powerful Lua programming language or
Arduino IDE.
• USB-TTL included, plug & play.
• 10 GPIOs D0-D10, PWM functionality, IIC and SPI communication, 1-Wire and ADC A0
etc. all in one board.
• Event-driven API for network applications.
• PCB antenna.
• Open-source
• Interactive
• Programmable
• Low cost
• Simple
• Smart
• Wi-Fi Networking enabled
Advantages of NodeMCU:
• The ESP8266 is a low-cost Wi-Fi enabled microchip with full TCP/IP stack and
microcontroller capability.
• NodeMCU includes CPU core, faster Wi-Fi, more GPIOs, and supports Bluetooth 4.2,
and low power Bluetooth.
• Additionally, the ESP32 comes with touch sensitive pins, and built-in Hall Effect sensor
and temperature sensor.
• Very cheap as compared to Arduino Uno.
Disadvantages of NodeMCU:
• Need to learn a new language and IDE
• Reduced pin out
• Rare documentation
 ARDUINO
Arduino is an open-source electronics platform based on easy-to-use hardware and
software. Arduino boards are able to read inputs and turn it into an output. All Arduino
boards are completely open-source, empowering users to build them independently
and eventually adapt them to their particular
needs. The software, too, is open-source, and
it is growing through the contributions of users
worldwide.
Arduinos contain a number of different parts
and interfaces together on a single circuit
board. A number of pins, which are used to 
connect with various components you might want to use with the Arduino. These pins
come in two varieties: Digital pins, which can read and write a single state, on or off.
Most Arduinos have 14 digital I/O pins & Analog pins, which can read a range of values,
and are useful for more fine-grained control. Most Arduinos have six of these analog
pins.
A power connector, which provides power to both the device itself, and provides a low
voltage which can power connected components like LEDs and various sensors,
provided their power needs are reasonably low. The power connector can connect to
either an AC adapter or a small battery.
A microcontroller, the primary chip, which allows you to program the Arduino in order
for it to be able to execute commands and make decisions based on various input. The
exact chip varies depending on what type of Arduino you buy, but they are generally
Atmel controllers, usually ATmega8, ATmega168, ATmega328, ATmega1280, or
ATmega2560. The differences between these chips are subtle, but the biggest
difference a beginner will notice is the different amounts of onboard memory.
A serial connector, which on most newer boards is implemented through a standard
USB port. This connector allows you to communicate to the board from your
computer, as well as load new programs onto the device. Often times Arduinos can
also be powered through the USB port, removing the need for a separate power 
connection. A variety of other small components, like an oscillator and/or a voltage
regulator provide important capabilities to the board.
The Arduino IDE is open source software which is written in Java and will work on a
variety of platforms: Windows, Mac, and Linux. The IDE enables you to write code in a
special environment with syntax highlighting and other features which will make
coding easier, and then easily load your code onto the device with a simple click of a
button. The code for Arduino is generally written in Wiring, which is based on the
Processing programming language.
Applications:
• Arduino libraries helps everyone program easily.
• Everyone can process, received analog and digital signals.
• Also can design interactive robots or systems by using the sensor signals.
• Can have their system respond in motion, voice or light.
• Arduino has various designs of boards for various solutions.
Advantages of Arduino:
• Low power architectures.
• Easy to get started with great online support, rapid prototyping makes easy.
• Easy interfacing with sensors and data collection.
• Can send data wirelessly using Bluetooth, RF etc to the server via a computer.
• A lot of GPIOs with PWM capabilities.
• Everyone can use IDE, python, ruby, embedded C etc for programming it.
• It’s completely an Open-source.
Disadvantages of Arduino:
• Memory limitations
• Costlier than NodeMCU
• Connectivity to the internet needs additional shields which are not cost friendly,
especially in India.
• Can’t run a lot heavy algorithms, or interface say a touch-screen, etc without using
additional shields.
 DIFFERENCES
NodeMCU ARDUINO
1. 128 KB RAM
2. 4 MB ROM (Flash Memory)
3. Smaller in size
4. Cheaper
5. Voltage level- 3.3V
6. 9 digital pins and 1 analog pin
7. Favourable for global tasks
8. Wireless Communication (ESP8266
SoC)
9. Processor- 32 bit
10. Better Processor Speed
11. Can be programmed using ESPlorer
IDE or Arduino IDE
1. 2 KB RAM
2. 32 KB (For Arduino UNO)
3. Bigger in size
4. Costlier
5. Voltage level- 5V
6. 14 digital pins and 6 analog pins
7. Favourable for local tasks
8. Wireless communication- None
9. Processor- 8 bit (For Arduino UNO)
10. Lesser Processor Speed
11. Can be programmed using Arduino IDE 
 Wi-Fi MODULE (ESP8266)
ESP8266 is Wi-Fi enabled system on chip (SoC) module developed by Espressif system.
It is mostly used for development of IoT (Internet of Things) embedded applications.
ESP8266 comes with capabilities of
• 2.4 GHz Wi-Fi
• general-purpose input/output (16 GPIO)
• Inter-Integrated Circuit (I²C) serial
communication protocol
• analog-to-digital conversion (10-bit ADC)
• Serial Peripheral Interface (SPI) serial
communication protocol,
• I²S (Inter-IC Sound) interfaces with DMA(Direct Memory Access) (sharing pins
with GPIO),
• UART (on dedicated pins, plus a transmit-only UART can be enabled on GPIO2),
and
• pulse-width modulation (PWM).
It employs a 32-bit RISC CPU based on the Tensilica Xtensa L106 running at 80 MHz (or
overclocked to 160 MHz). It has a 64 KB boot ROM, 64 KB instruction RAM and 96 KB
data RAM. External flash memory can be accessed through SPI. ESP8266 module is low
cost standalone wireless transceiver that can be used for end-point IoT developments.
To communicate with the ESP8266 module, microcontroller needs to use set of AT
commands. Microcontroller communicates with ESP8266-01 module using UART
having specified Baud rate.
There are many third-party manufacturers that produce different modules based on
this chip. So, the module comes with different pin availability options like,
• ESP-01 comes with 8 pins (2 GPIO pins) – PCB trace antenna. (shown in above
figure)
• ESP-02 comes with 8 pins, (3 GPIO pins) – U-FL antenna connector.
• ESP-03 comes with 14 pins, (7 GPIO pins) – Ceramic antenna.
• ESP-04 comes with 14 pins, (7 GPIO pins) – No ant.
ESP8266-01 Module Pin Description
3V3: - 3.3 V Power Pin.
GND: - Ground Pin.
RST: - Active Low Reset Pin.
EN: - Active High Enable Pin.
TX: - Serial Transmit Pin of UART.
RX: - Serial Receive Pin of UART.
GPIO0 & GPIO2: - General Purpose I/O Pins
BIBLIOGRAPHY
1. https://www.zdnet.com/article/what-is-the-internet-of-things-everythingyou-need-to-know-about-the-iot-right-now/
2. https://internetofthingsagenda.techtarget.com/definition/Internet-of-ThingsIoT
3. https://www.electronicwings.com/nodemcu/introduction-to-nodemcu
4. https://www.arduino.cc/en/Guide/Introduction
5. https://opensource.com/resources/what-arduino
6. http://www.hexcodeplus.com/blog/arduino%20vs%20nodemcu.html
7. https://blog.device-interactions.com/2020/01/nodemcu-vs-arduino-unochoosing.html
8. https://www.electronicwings.com/sensors-modules/esp8266-wifi-module
